
#Область СлужебныеПроцедурыИФункции

#Область ДляВызоваИзДругихМодулей

Функция ДоступныеРезервныеКопии() Экспорт
	ПроверитьПодключениеКWebDav();
	Попытка
		СодержимоеФайлаСоСписком = СкачатьJSONФайл(ПутьWebDav() + "list.json");
	Исключение
		Возврат НоваяТаблицаРезервныхКопий();
	КонецПопытки;
	
	Модуль = МодульФорматаДляЧтения(СодержимоеФайлаСоСписком.ВерсияФормата);
	Возврат Модуль.ДоступныеРезервныеКопии(СодержимоеФайлаСоСписком);
КонецФункции

Процедура СоздатьРезервнуюКопию() Экспорт
	ИмяКаталогаАрхива = ПолучитьИмяВременногоФайла() + ПолучитьРазделительПутиСервера();
	ИмяКаталогаТалонов = ИмяКаталогаАрхива + "cards" + ПолучитьРазделительПутиСервера();
	СоздатьКаталог(ИмяКаталогаАрхива);
	СоздатьКаталог(ИмяКаталогаТалонов);
	
	ВыгрузитьМанифест(ИмяКаталогаАрхива);
	ВыгрузитьКонстанты(ИмяКаталогаАрхива);
	ВыгрузитьГарантийныеТалоны(ИмяКаталогаТалонов);
	
	ИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
	ЗаписьАрхива = Новый ЗаписьZipФайла(ИмяФайлаАрхива,,,, УровеньСжатияZIP.Максимальный);
	ЗаписьАрхива.Добавить(ИмяКаталогаАрхива + "/*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	ЗаписьАрхива.Записать();
	
	ЗаписатьРезервнуюКопию(ИмяФайлаАрхива);
	
	УдалитьФайлы(ИмяКаталогаАрхива);
	УдалитьФайлы(ИмяФайлаАрхива);
КонецПроцедуры

Процедура ВосстановитьРезервнуюКопию(ИмяФайла) Экспорт
	ИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
	ИмяКаталогаАрхива = ПолучитьИмяВременногоФайла() + ПолучитьРазделительПутиСервера();
	КопироватьФайл(ПутьWebDav() + ИмяФайла, ИмяФайлаАрхива);
	
	ЧтениеАрхива = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
	ЧтениеАрхива.ИзвлечьВсе(ИмяКаталогаАрхива);
	ЧтениеАрхива.Закрыть();
	УдалитьФайлы(ИмяФайлаАрхива);
	
	Манифест = СкачатьJSONФайл(ИмяКаталогаАрхива + "manifest.json");
	МодульЧтения = МодульФорматаДляЧтения(Манифест.ВерсияФормата);
	
	НачатьТранзакцию();
	Попытка
	    ВосстановитьКонстанты(ИмяКаталогаАрхива, МодульЧтения);
		ВосстановитьГарантийныеТалоны(ИмяКаталогаАрхива, МодульЧтения);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		УдалитьФайлы(ИмяКаталогаАрхива);
		ВызватьИсключение;
	КонецПопытки;
	
	УдалитьФайлы(ИмяКаталогаАрхива);
КонецПроцедуры

Процедура УдалитьРезервнуюКопию(ИмяФайла) Экспорт
	ТаблицаКопий = ДоступныеРезервныеКопии();
	
	СтрКопии = ТаблицаКопий.Найти(ИмяФайла, "ИмяФайла");
	ТаблицаКопий.Удалить(СтрКопии);
	
	Данные = МодульФорматаДляЗаписи().СформироватьФайлДоступныхРезервныхКопий(ТаблицаКопий);
	ЗаписатьJSONФайл(Данные, ПутьWebDav() + "list.json");
	
	УдалитьФайлы(ПутьWebDav() + ИмяФайла);
КонецПроцедуры

#КонецОбласти

#Область КонструкторыОбъектовФормата

Функция НоваяТаблицаРезервныхКопий() Экспорт
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Возврат Таблица;
КонецФункции

#КонецОбласти

Функция ПутьWebDav()
	Логин = Константы.ЛогинЯндексДиск.Получить();
	Пароль = Константы.ПарольЯндексДиск.Получить();
	Каталог = Константы.КаталогЯндексДиск.Получить();
	
	Путь = СтрШаблон("https://%1:%2@webdav.yandex.ru/", Логин, Пароль);
	
	Если ЗначениеЗаполнено(Каталог) Тогда
		Путь = Путь + Каталог + "/";
	КонецЕсли;
	
	Возврат Путь;
КонецФункции

Функция СкачатьJSONФайл(ПутьИлиАдресWebDav, ПрочитатьВСоответствие = Ложь)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("json");
	КопироватьФайл(ПутьИлиАдресWebDav, ИмяВременногоФайла);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);
	Содержимое = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
	ЧтениеJSON.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Содержимое;
КонецФункции

Процедура ЗаписатьJSONФайл(Данные, Путь)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("json");
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ИмяВременногоФайла);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	ЗаписьJSON.Закрыть();
	
	Попытка
	    КопироватьФайл(ИмяВременногоФайла, Путь);
	Исключение
		УдалитьФайлы(ИмяВременногоФайла);
		ВызватьИсключение;
	КонецПопытки;
	
	УдалитьФайлы(ИмяВременногоФайла);
КонецПроцедуры

Процедура ПроверитьПодключениеКWebDav() Экспорт
	ЗаписатьJSONФайл("test", ПутьWebDav() + "test.json");
КонецПроцедуры

Функция МодульФорматаДляЧтения(Версия)
	Если Версия = 1 Тогда
		Возврат РезервноеКопированиеФормат1;
	Иначе
		Шаблон = НСтр("ru = 'Каталог резервных копий содержит данные, созданные более новой версией приложения.
                       |Техническая информация: версия формата %1 не поддеживается'");
		ВызватьИсключение СтрШаблон(Шаблон, Версия);
	КонецЕсли;
КонецФункции

Функция МодульФорматаДляЗаписи()
	Возврат РезервноеКопированиеФормат1;
КонецФункции

Процедура ВыгрузитьМанифест(ИмяКаталогаАрхива)
	Данные = МодульФорматаДляЗаписи().СформироватьФайлМанифеста();
	ЗаписатьJSONФайл(Данные, ИмяКаталогаАрхива + "manifest.json");
КонецПроцедуры

Процедура ВыгрузитьКонстанты(ИмяКаталогаАрхива)
	Данные = МодульФорматаДляЗаписи().СформироватьФайлКонстант();
	ЗаписатьJSONФайл(Данные, ИмяКаталогаАрхива + "constants.json");
КонецПроцедуры

Процедура ВыгрузитьГарантийныеТалоны(ИмяКаталогаТалонов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГарантийныеТалоны.Ссылка КАК Ссылка,
		|	ГарантийныеТалоны.ПометкаУдаления КАК ПометкаУдаления,
		|	ГарантийныеТалоны.Код КАК Код,
		|	ГарантийныеТалоны.Наименование КАК Наименование,
		|	ГарантийныеТалоны.ДатаПокупки КАК ДатаПокупки,
		|	ГарантийныеТалоны.СрокГарантии КАК СрокГарантии,
		|	ГарантийныеТалоны.ДатаОкончанияГарантии КАК ДатаОкончанияГарантии,
		|	ГарантийныеТалоны.Комментарий КАК Комментарий,
		|	ГарантийныеТалоны.ДатаПометкиУдаления КАК ДатаПометкиУдаления
		|ИЗ
		|	Справочник.ГарантийныеТалоны КАК ГарантийныеТалоны
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГарантийныеТалоныПрикрепленныеФото.Ссылка КАК Ссылка,
		|	ГарантийныеТалоныПрикрепленныеФото.ХранилищеКартинки КАК ХранилищеКартинки,
		|	ГарантийныеТалоныПрикрепленныеФото.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Справочник.ГарантийныеТалоны.ПрикрепленныеФото КАК ГарантийныеТалоныПрикрепленныеФото
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГарантийныеТалоныПрикрепленныеФото.НомерСтроки";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаШапка = РезультатЗапроса[0].Выбрать();
	ВыборкаФото = РезультатЗапроса[1].Выбрать();
	
	МодульФормата = МодульФорматаДляЗаписи();
	
	Пока ВыборкаШапка.Следующий() Цикл
		ИдентификаторТалона = Строка(ВыборкаШапка.Ссылка.УникальныйИдентификатор());
		ИмяКаталогаТалона = ИмяКаталогаТалонов + ИдентификаторТалона + ПолучитьРазделительПутиСервера();
		СоздатьКаталог(ИмяКаталогаТалона);
		
		Данные = МодульФормата.СформироватьФайлГарантийногоТалона(ВыборкаШапка);
		ЗаписатьJSONФайл(Данные, ИмяКаталогаТалона + "card.json");
		
		ВыборкаФото.Сбросить();
		Пока ВыборкаФото.НайтиСледующий(ВыборкаШапка.Ссылка, "Ссылка") Цикл
			ДвоичныеДанные = ВыборкаФото.ХранилищеКартинки.Получить().ПолучитьДвоичныеДанные();
			ДвоичныеДанные.Записать(ИмяКаталогаТалона + "img" + Формат(ВыборкаФото.НомерСтроки - 1, "ЧН=0; ЧГ=") + ".bin");
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьРезервнуюКопию(ИмяФайлаАрхива)
	ДатаКопии = ТекущаяУниверсальнаяДата();
	ИмяФайлаWebDav = Формат(ДатаКопии, "ДФ=yyyyMMddHHmmss") + ".zip";
	БазовыйПуть = ПутьWebDav();
	
	ТекущиеРезервныеКопии = ДоступныеРезервныеКопии();
	
	СтрКопии = ТекущиеРезервныеКопии.Добавить();
	СтрКопии.ИмяФайла = ИмяФайлаWebDav;
	СтрКопии.Дата = ДатаКопии;
	
	КопироватьФайл(ИмяФайлаАрхива, БазовыйПуть + ИмяФайлаWebDav);
	
	ФайлСпискаКопий = МодульФорматаДляЗаписи().СформироватьФайлДоступныхРезервныхКопий(ТекущиеРезервныеКопии);
	ЗаписатьJSONФайл(ФайлСпискаКопий, БазовыйПуть + "list.json");
КонецПроцедуры

Процедура ВосстановитьКонстанты(ИмяКаталогаАрхива, МодульЧтения)
	Данные = СкачатьJSONФайл(ИмяКаталогаАрхива + "constants.json");
	НовыеЗначенияКонстант = МодульЧтения.ЗначенияКонстантИзКопии(Данные);
	
	Для Каждого КлючЗначение Из НовыеЗначенияКонстант Цикл
		Константы[КлючЗначение.Ключ].Установить(КлючЗначение.Значение);
	КонецЦикла;
КонецПроцедуры

Процедура ВосстановитьГарантийныеТалоны(ИмяКаталогаАрхива, МодульЧтения)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГарантийныеТалоны.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ГарантийныеТалоны КАК ГарантийныеТалоны";
	
	РезультатЗапроса = Запрос.Выполнить();
	СуществующиеТалоны = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	УдалитьОбъекты(СуществующиеТалоны);
	
	Для Каждого КаталогТалонаОС Из НайтиФайлы(ИмяКаталогаАрхива + "cards", "*") Цикл
		ИмяКаталогаТалона = ИмяКаталогаАрхива + "cards"
			+ ПолучитьРазделительПутиСервера() + КаталогТалонаОС.Имя + ПолучитьРазделительПутиСервера();
		//
		Талон = Справочники.ГарантийныеТалоны.СоздатьЭлемент();
		Ссылка = Справочники.ГарантийныеТалоны.ПолучитьСсылку(Новый УникальныйИдентификатор(КаталогТалонаОС.Имя));
		Талон.УстановитьСсылкуНового(Ссылка);
		
		Данные = СкачатьJSONФайл(ИмяКаталогаТалона + "card.json");
		ЗначенияРеквизитовШапки = МодульЧтения.ЗначенияРеквизитовГарантийногоТалона(Данные);
		ЗаполнитьЗначенияСвойств(Талон, ЗначенияРеквизитовШапки);
		
		Талон.ДатаОкончанияГарантии = ДобавитьМесяц(Талон.ДатаПокупки, Талон.СрокГарантии);
		
		ЗагруженныеФото = Новый ТаблицаЗначений;
		ЗагруженныеФото.Колонки.Добавить("ПолеПорядка", Новый ОписаниеТипов("Число"));
		ЗагруженныеФото.Колонки.Добавить("ХранилищеКартинки", Новый ОписаниеТипов("ХранилищеЗначения"));
		
		Для Каждого ФайлКартинки Из НайтиФайлы(ИмяКаталогаТалона, "img*.bin") Цикл
			ЗначениеПорядка = СтрЗаменить(ФайлКартинки.Имя, "img", "");
			ЗначениеПорядка = Число(СтрЗаменить(ЗначениеПорядка, ".bin", ""));
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя);
			Картинка = Новый Картинка(ДвоичныеДанные);
			
			СтрФото = ЗагруженныеФото.Добавить();
			СтрФото.ПолеПорядка = ЗначениеПорядка;
			СтрФото.ХранилищеКартинки = Новый ХранилищеЗначения(Картинка);
		КонецЦикла;
		
		ЗагруженныеФото.Сортировать("ПолеПорядка");
		ЗагруженныеФото.Колонки.Удалить("ПолеПорядка");
		Талон.ПрикрепленныеФото.Загрузить(ЗагруженныеФото);
		
		Талон.ОбменДанными.Загрузка = Истина;
		Талон.Записать();
	КонецЦикла;
КонецПроцедуры

Функция ДатаДляВыгрузкиВJSON(Дата) Экспорт
	Возврат Формат(Дата, "ДФ=dd.MM.yyyy; ДП=1.1.0001") + " 0:00:00";
КонецФункции

#КонецОбласти
